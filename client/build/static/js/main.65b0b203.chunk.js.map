{"version":3,"sources":["components/Header.jsx","components/Results.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Results","loadedFoods","isLoading","notFound","errors","fieldsets","length","style","textAlign","marginBottom","className","color","Form","useState","nutrient","min","max","setFieldsets","results","setResults","setNotFound","setLoading","setErrors","handleEnterKey","e","key","handleSubmit","preventDefault","query","fieldsetsCopy","inputNutrients","inputMins","inputMaxes","i","fieldsetCopy","toLowerCase","includes","slice","axios","get","then","res","data","catch","err","handleChange","field","fieldsetNum","target","value","map","result","name","measure","nutrients","j","gm","onClick","pop","push","onSubmit","fieldset","required","type","onChange","onKeyPress","App","align","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"gPAUeA,G,kBARA,WACb,OACE,6BACE,uD,+BCmCSC,EAtCC,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,YAAaC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,OAAwB,EAAhBC,UAC3D,OAAIH,EAEA,0CAIOD,EAAYK,OAEnB,oCACE,uBAAGC,MAAO,CAAEC,UAAW,SAAUC,aAAc,SAAWR,EAAYK,OAAtE,aACA,yBAAKI,UAAU,yBACb,yBAAKA,UAAU,oBAAf,QACA,yBAAKA,UAAU,yBAAf,cAEDT,GAGIE,EAEP,iDAMA,oCACE,wBAAII,MAAO,CAAEI,MAAO,QACjBP,GAEH,4DC+JOQ,EA3LF,WACX,IADiB,EAMiBC,mBAAS,CALvB,CAClBC,SAAU,GACVC,IAAK,GACLC,IAAK,MAJU,mBAMVX,EANU,KAMCY,EAND,OAOaJ,mBAAS,IAPtB,mBAOVK,EAPU,KAODC,EAPC,OAQeN,oBAAS,GARxB,mBAQVV,EARU,KAQAiB,EARA,OASeP,oBAAS,GATxB,mBASVX,EATU,KASCmB,EATD,OAUWR,mBAAS,IAVpB,mBAUVT,EAVU,KAUFkB,EAVE,KAYXC,EAAiB,SAAAC,GAAC,MACZ,UAAVA,EAAEC,IAAkBC,EAAaF,GAAK,MAsDlCE,EAAe,SAACF,GACpBA,EAAEG,iBACFN,GAAW,GAMX,IALA,IAAIO,EAAQ,GACNC,EAAgBxB,EAClByB,EAAiB,GACjBC,EAAY,GACZC,EAAa,GACRC,EAAI,EAAGA,EAAIJ,EAAcvB,OAAQ2B,IAAK,CAC7C,IAAMC,EAAeL,EAAcI,GAC7BnB,EAAWoB,EAAapB,SAASqB,cACnCpB,EAAMmB,EAAanB,IACnBC,EAAMkB,EAAalB,IAClBF,IAAaA,EAASsB,SAAS,OAC/BrB,IAAKA,EAAM,GACXC,IAAKA,EAAM,OAChBc,GAAc,UAAOhB,EAAP,KACdiB,GAAS,UAAOhB,EAAP,KACTiB,GAAU,UAAOhB,EAAP,MAEZY,GAAK,oBAAiBE,EAAeO,MAAM,EAAGP,EAAexB,OAAO,GAA/D,iBAA0EyB,EAAUM,MAAM,EAAGN,EAAUzB,OAAO,GAA9G,kBAA0H0B,EAAWK,MAAM,EAAGL,EAAW1B,OAAO,IACrKgC,IAAMC,IAAN,4BAA+BX,IAC5BY,MAAK,SAAAC,GACAA,EAAIC,KAAKpC,OAAS,GACpBa,EAAWsB,EAAIC,MACfrB,GAAW,KAEXF,EAAW,IACXE,GAAW,GACXD,GAAY,OAGfuB,OAAM,SAAAC,GAAG,OAAItB,EAAUsB,OAGtBC,EAAe,SAACC,EAAOC,GAC3B,OAAO,SAAAvB,GACL,IAAIK,EAAgBxB,EAAUgC,QAC9BR,EAAckB,GAAaD,GAAStB,EAAEwB,OAAOC,MAC7ChC,EAAaY,KAIX5B,EACJiB,EAAQZ,OAAS,EACfY,EAAQgC,KAAI,SAACC,EAAQlB,GAAT,OACV,yBAAKR,IAAG,UAAKQ,EAAL,KAAWvB,UAAU,yBAC3B,yBAAKA,UAAU,oBACZyC,EAAOC,KADV,KACkBD,EAAOE,SAEzB,yBAAK3C,UAAU,gCACZyC,EAAOG,UAAUJ,KAAI,SAACpC,EAAUyC,GAAX,OACpB,yBAAK9B,IAAG,UAAK8B,EAAL,KAAW7C,UAAU,wBAC3B,yBAAKA,UAAU,uBACZI,EAASA,UAEZ,yBAAKJ,UAAU,oBACZI,EAAS0C,GADZ,mBAQV,GAGJ,OACE,oCACE,yBAAK9C,UAAU,mBACb,4BAAQ+C,QAlGS,WACrB,IAAI5B,EAAgBxB,EAAUgC,MAAM,EAAE,GACtC,IAAK,IAAIZ,KAAOI,EAAc,GAAIA,EAAc,GAAGJ,GAAO,GAC1DR,EAAa,YAAIY,IACjBP,EAAU,MA8FN,+BACA,4BAAQmC,QAhFS,SAACjC,GAEtB,GADAA,EAAEG,iBACEtB,EAAUC,OAAS,EAAG,CACxB,IAAIuB,EAAgBxB,EAAUgC,QAC9BR,EAAc6B,MACdzC,EAAaY,MA2EX,qCACA,4BAAQ4B,QA7FS,SAACjC,GACtBA,EAAEG,iBACF,IAAIE,EAAgBxB,EAAUgC,QAE9BR,EAAc8B,KAAK,CACjB7C,SAAU,GACVC,IAAK,GACLC,IAAK,KAEPC,EAAaY,KAoFT,gCAGF,0BAAM+B,SAAUlC,GACd,yBAAKhB,UAAU,qBACZL,EAAU6C,KAAI,SAACW,EAAU5B,GACxB,OACE,yBAAKvB,UAAU,mBACbe,IAAKQ,GAEL,2CACE,2BAAO6B,UAAQ,EAACC,KAAK,OACnBd,MAAO5C,EAAU4B,GAAGnB,SACpBkD,SAAUnB,EAAa,WAAYZ,GACnCgC,WAAY1C,KAGhB,0CACE,2BAAOwC,KAAK,OACVd,MAAO5C,EAAU4B,GAAGlB,IACpBiD,SAAUnB,EAAa,MAAOZ,GAC9BgC,WAAY1C,KAGhB,0CACE,2BAAOwC,KAAK,OACVd,MAAO5C,EAAU4B,GAAGjB,IACpBgD,SAAUnB,EAAa,MAAOZ,GAC9BgC,WAAY1C,UAOxB,yBAAKb,UAAU,mBACb,4BAAQ+C,QA/JW,SAAAjC,GACzBA,EAAEG,iBACFR,EAAW,IACXC,GAAY,KA4JN,wBACA,4BAAQqC,QA1JM,SAAAjC,GACpBA,EAAEG,iBACFN,GAAW,GACXiB,IAAMC,IAAN,kBACGC,MAAK,SAAAC,GACAA,EAAIC,KAAKpC,OAAS,GACpBa,EAAWsB,EAAIC,MACfrB,GAAW,KAEXF,EAAW,UACXE,GAAW,GACXD,GAAY,OAGfuB,OAAM,SAAAC,GAAG,OAAItB,EAAUsB,QA4IpB,gCACA,2BAAOmB,KAAK,SAASd,MAAM,gCAG/B,yBAAKvC,UAAU,qBACb,kBAAC,EAAD,CAAST,YAAaA,EAAaC,UAAWA,EAAWC,SAAUA,EAAUC,OAAQA,EAAQC,UAAWA,OCvKjG6D,EAZH,WACV,OACE,yBAAKxD,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,uBAAGyD,MAAM,UACP,uBAAGC,KAAK,iDAAiDpB,OAAO,UAAhE,kBCAYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65b0b203.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n    <div>\n      <h1>Food nutrient search</h1>\n    </div>\n  )\n}\n\nexport default Header;","import React from 'react';\n\nconst Results = ({ loadedFoods, isLoading, notFound, errors, fieldsets }) => {\n  if (isLoading) {\n    return (\n      <h3>\n        Loading...\n      </h3>\n    )\n  } else if (loadedFoods.length) {\n    return (\n      <>\n        <p style={{ textAlign: \"center\", marginBottom: \"10px\" }}>{loadedFoods.length} results:</p>\n        <div className=\"header-grid-container\">\n          <div className=\"header-grid-food\">Food</div>\n          <div className=\"header-grid-nutrients\">Nutrients</div>\n        </div>  \n        {loadedFoods}\n      </>\n    )\n  } else if (notFound) {\n    return (\n      <h3>\n        No results found.\n      </h3>\n    )\n  } else {\n    return (\n      <>\n        <h4 style={{ color: \"red\" }}>\n          {errors}\n        </h4>\n        <h3>\n          Results will display here.\n        </h3>\n      </>\n    )\n  }\n}\n\nexport default Results;\n\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport Results from './Results';\n\nconst Form = () => {\n  const newFieldset = {\n    nutrient: '',\n    min: '',\n    max: ''\n  }\n  const [fieldsets, setFieldsets] = useState([newFieldset]);\n  const [results, setResults] = useState([]);\n  const [notFound, setNotFound] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [errors, setErrors] = useState([]);\n\n  const handleEnterKey = e => (\n    e.key === 'Enter' ? handleSubmit(e) : null\n  );\n\n  const handleClearResults = e => {\n    e.preventDefault();\n    setResults([]);\n    setNotFound(false);\n  };\n\n  const fetchAllFoods = e => {\n    e.preventDefault();\n    setLoading(true);\n    axios.get(`/api/foods/all`)\n      .then(res => {\n        if (res.data.length > 0) {\n          setResults(res.data);\n          setLoading(false);\n        } else {\n          setResults('string');\n          setLoading(false);\n          setNotFound(true);\n        }\n      })\n      .catch(err => setErrors(err));\n  };\n\n  const clearAllFields = () => {\n    let fieldsetsCopy = fieldsets.slice(0,1);\n    for (let key in fieldsetsCopy[0]) fieldsetsCopy[0][key] = '';\n    setFieldsets([...fieldsetsCopy]);\n    setErrors([]);\n  };\n\n  const addNewFieldset = (e) => {\n    e.preventDefault();\n    let fieldsetsCopy = fieldsets.slice();\n    // fieldsetsCopy.push(newFieldset);\n    fieldsetsCopy.push({\n      nutrient: '',\n      min: '',\n      max: ''\n    })\n    setFieldsets(fieldsetsCopy);\n  };\n\n  const removeFieldset = (e) => { \n    e.preventDefault();\n    if (fieldsets.length > 1) {\n      let fieldsetsCopy = fieldsets.slice();\n      fieldsetsCopy.pop(); \n      setFieldsets(fieldsetsCopy);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n    let query = '';\n    const fieldsetsCopy = fieldsets;\n    let inputNutrients = '';\n    let inputMins = '';\n    let inputMaxes = '';\n    for (let i = 0; i < fieldsetsCopy.length; i++) {\n      const fieldsetCopy = fieldsetsCopy[i];\n      const nutrient = fieldsetCopy.nutrient.toLowerCase();\n      let min = fieldsetCopy.min;\n      let max = fieldsetCopy.max;\n      if (!nutrient || (nutrient.includes(','))) continue;\n      if (!min) min = 0;\n      if (!max) max = 99999; \n      inputNutrients += `${nutrient},`;\n      inputMins += `${min},`;\n      inputMaxes += `${max},`;\n    }  \n    query += `nutrients=${inputNutrients.slice(0, inputNutrients.length-1)}&mins=${inputMins.slice(0, inputMins.length-1)}&maxes=${inputMaxes.slice(0, inputMaxes.length-1)}`\n    axios.get(`/api/foods/search?${query}`)\n      .then(res => {\n        if (res.data.length > 0) {\n          setResults(res.data);\n          setLoading(false);\n        } else {\n          setResults([]);\n          setLoading(false);\n          setNotFound(true);\n        }\n      })\n      .catch(err => setErrors(err));\n  };\n\n  const handleChange = (field, fieldsetNum) => {\n    return e => {\n      let fieldsetsCopy = fieldsets.slice();\n      fieldsetsCopy[fieldsetNum][field] = e.target.value;\n      setFieldsets(fieldsetsCopy)\n    }\n  };\n\n  const loadedFoods = (\n    results.length > 0 ? \n      results.map((result, i) => (\n        <div key={`${i}1`} className=\"outter-grid-container\">\n          <div className=\"outter-grid-food\">\n            {result.name}, {result.measure}\n          </div>\n          <div className=\"outter-grid-nutrients-values\">\n            {result.nutrients.map((nutrient, j) => (\n              <div key={`${j}1`} className=\"inner-grid-container\">\n                <div className=\"inner-grid-nutrient\">\n                  {nutrient.nutrient} \n                </div>\n                <div className=\"inner-grid-value\">\n                  {nutrient.gm} grams\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )) \n    : []\n  )\n\n  return (\n    <>\n      <div className=\"buttons-wrapper\">\n        <button onClick={clearAllFields}>❌ Remove All Fieldsets</button>\n        <button onClick={removeFieldset}>⛔️ Remove Last Fieldset</button>\n        <button onClick={addNewFieldset}>➕ Add Another Fieldset</button>\n        \n      </div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"fieldsets-wrapper\"> \n          {fieldsets.map((fieldset, i) => {\n            return (\n              <div className=\"fieldset-wrapper\" \n                key={i}\n              >\n                <label>Nutrient:\n                  <input required type=\"text\"\n                    value={fieldsets[i].nutrient}\n                    onChange={handleChange(\"nutrient\", i)} \n                    onKeyPress={handleEnterKey}\n                  />\n                </label>\n                <label>Minimum:\n                  <input type=\"text\"\n                    value={fieldsets[i].min}\n                    onChange={handleChange(\"min\", i)}\n                    onKeyPress={handleEnterKey}\n                  />\n                </label>\n                <label>Maximum:\n                  <input type=\"text\"\n                    value={fieldsets[i].max}\n                    onChange={handleChange(\"max\", i)}\n                    onKeyPress={handleEnterKey}\n                  />\n                </label>\n              </div>\n            )\n          })}\n        </div>\n        <div className=\"buttons-wrapper\">\n          <button onClick={handleClearResults}>❌ Clear Results</button>\n          <button onClick={fetchAllFoods}>🍔 Fetch All Foods</button>\n          <input type=\"submit\" value=\"✔️ Submit Query\" /> \n        </div>\n      </form>\n      <div className=\"results-container\">\n        <Results loadedFoods={loadedFoods} isLoading={isLoading} notFound={notFound} errors={errors} fieldsets={fieldsets} />\n      </div>\n    </>\n  );\n};\n\nexport default Form;","import React from 'react';\nimport './style/form.css';\nimport './style/results.css';\nimport Header from './components/Header';\nimport Form from './components/Form';\n\nconst App = () => {\n  return (\n    <div className=\"app-container\">\n      <Header />\n      <Form />\n      <p align=\"center\">\n        <a href=\"https://github.com/fsiino/food-nutrition-flask\" target=\"_blank\">Github Repo</a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}